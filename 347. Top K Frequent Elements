// 347. Top K Frequent Elements
// https://leetcode.com/problems/top-k-frequent-elements
class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        int i, n = nums.size();
        unordered_map<int,int> hash;
        unordered_map<int,int>::iterator got;
        priority_queue<pair<int,int>> pq;
        vector<int> result;
        
        for(i=0;i<n;i++) {
            got = hash.find(nums[i]);
            if(got == hash.end())
                hash.insert(pair<int,int>(nums[i],1));
            else
                got->second++;
        }
        
        int hash_size = hash.size();
        
        for(got = hash.begin(); got != hash.end(); got++) {
            //cout << got->first << " " << got->second << endl;
            pq.push(pair<int,int>(got->second, got->first));
            if(pq.size() > hash_size - k){
                result.push_back(pq.top().second);
                pq.pop();
            }
        }
        
        return result;
    }
};
